// global로 default 브랜치를 main으로 설정하기
$ git config --global init.defaultBranch main

// defaultBranch 값 읽기
$ git config --get  init.defaultBranch
> main

$ git branch -M main

▶ 서버란?
    클라이언트의 요청을 처리하는 친구
    데이터만 달라고 요청하면 데이터만 주고, 처리만 해달라고 하면 처리만 해주고 등등 요청대로 수행한다.
    우리가 주소창에 입력하는 것이 데이터를 요청한다고 생각하면 된다.

▶ 포트란?
    아이피는 컴퓨터를 식별하는 주소. 때문에 아이피를 알면 서버를 찾을 수 있다.
    하지만 포트까지 알아야 제대로된 서비스를 찾을 수 있다.
    아이피가 대형 마트라면 포트가 각각의 매대라고 생각하면 된다.
    우리가 흔히 보는 url, 주소창에 있는 것들에도 전부 아이피와 포트 번호가 들어가지만, 우리는 확인할 수 없다.
    그 이유 아이피와 포트를 쉽게 알아보기 위해 주소를 붙여놨기 때문이다.

▶ 프레임워크란?
    소프트웨어 개발을 쉽게 하기 위한 소프트웨어 개발 환경 (코드들의 묶음)
    개개인의 능력에 차이가 있는 개발자들도 같은 환경, 틀 안에서 개발을 하게 되면서 능력의 차이를 줄일 수 있다.
    정해진 틀 안에서 개발해야한다는 점은 단점으로 보일 수 있으나, 개발 효율은 상당히 높다.

▶ 라이브러리란?
    애플리케이션 개발에 필요한 기능인 클래스, 함수 등을 모아놓은 코드의 모음
    라이브러리를 추가만 한다면 복잡한 코드를 직접 작성하지 않고도 원하는 기능을 사용할 수 있기에
    개발도 편해지고 개발 속도도 빨라진다.
    또한 라이브러리는 독립적이기 때문에 서로 영향을 주지 않는다.

※ 프레임워크는 프로젝트의 전체적인 구조를 잡아주기 위해 사용하고
  라이브러리는 개발을 하는 과정에서 기능을 구현하기 위해 사용한다.


▶ 스프링 프레임워크 (경량(모듈) 프레임워크)
    자바 기반의 엔터프라이즈 애플리케이션을 개발을 위한 프레임워크.
    (웹 사이트를 하나 만든다고 가정을 해보면, 개발하고, 신경써야할 것들이 상당히 많다.
    안정성, 접근성, 서버 성능, 보안 기타 등등... 이것들까지 신경쓰면서 비즈니스 로직까지 개발하려고 하니 힘들다...
    그래서 2003년에 나온 것이 스프링 프레임워크, 앞에 신경쓰이던 것들을 높은 수준으로 제공하는 도구
    덕분에 개발자는 기능개발에만 집중할 수 있게된다.)
    애플리케이션의 안정성, 서버 성능, 보안등을 제공해주는 도구.
    개발자들이 비즈니스 로직에만 집중할 수 있도록 도와준다.
    장점이 많지만 설정이 매우 복잡하다.

▶ 스프링 부트
    스프링 프레임워크를 더 쉽고 빠르게 이용할 수 있도록 만들어주는 도구
    개발자가 좀 더 비즈니스 로직 개발에만 집중할 수 있도록 만들어주는 도구
    스프링 프레임워크 속에 속한 도구.

▶ 스프링 프레임워크와 스프링 부트의 차이
    1) 개발 환경 설정
        - 스프링 프레임워크는 개발 환경을 수동으로 구성
        - 스프링 부트는 거이 모든 기능을 자동으로 로드, 개발 환경도 따로 구성할 필요가 없다

    2) WAS (Web Application Server)
        - 스프링 프레임워크는 프로젝트 실행에 필요한 서브를 별도로 다운 및 수동 설정
        - 스프링 부트는 내장형 서버를 제공해 별도의 설정이 필요 없음

▷ 스프링의 특징
▶ IoC란? (Inversion of Control, 제어의 역전)
    순수 자바프로젝트에서 객체를 생성할 때는 객체가 필요한 곳에 개발자가 직접 생성했다.
    생성자를 호출하는 식으로 생성!
    제어의 역전은 다른 책체를 개발자가 직접 생성하거나 제어하는 것이 아니라 외부에서
    관리하는 객체를 가져와 사용하는 것을 말함.
    스프링에서는 스프링 컨테이너가 객체를 관리, 제공하는 역할을 한다.

▶ DI란? (Dependency Injection, 의존성 주입)
    제어의 역전을 구현하기 위해 사용하는 방법.
    의존성 주입이란 다른 클래스에 의존한다는 뜻.

    의존 : A객체가 B객체 없이 동작이 불가능한 상황을 'A가 B에 의존적이다'라고 표현한다.
    주입
        어떤 객체가 필요로하는 객체를 외부에서 밀어 넣는 것을 의미.
        주입을 받는 입장에서는 어떤 객체인지 신경 쓸 필요가 없고 어떤 객체에 의존하든 자신의 역할은 변하지 않는다.

    그런데 우리가 생각했을 때 A클래스에서 B클래스 안에 있는 메소드를 사용하기 위해서는 B클래스의 정보를 메모리에 올리고,
    즉 객체를 만들어서 해당 위치에 있는 필드에 접근 할 수 있었다.
    근데 문법을 살펴보면 생성자를 호출하는 문법 자체가 없다. 메모리에 할당이 되지 않았는데 필드를 사용할 수 있는 것은 말이 안된다!
    하지만, 동작이 잘되는 이유는 스프링 컨테이너에서 객체를 주입했기 때문.
    스프링의 경우 클래스 A에서 B객체를 쓰고 싶은 경우 객체를 직접 생성하는 것이 아니라
    스프링 컨테이너에서 객체를 주입받아 사용한다.

▶ 스프링 컨테이너
    스프링 컨테이너는 빈을 생성하고 관리한다.
    빈이 생성되고 소멸되기까지의 라이프 싸이클을 관리!
    그리고 @Autowired 같은 어노테이션을 사용해 빈을 주입받을 수 있게 AI를 지원한다.

▶ 빈 (Bean)
    스프링 컨테이너가 생성하고 관리하는 객체.
    빈을 등록하는 방법
        1) xml 파일 설정 (spring framework)
        2) 어노테이션을 이용한 추가 (spring boot)

    스프링에서 제공해주는 객체라고 생각하자!

▶ AOP란? (Aspect Oriented Programming)
    관점지향 프로그래밍.
    프로그래밍에 대한 관심을 핵심 관점, 부가 관점으로 나누어서 관심 기준으로 모듈화하는 것을 의미.

    [원래는 게시글 작성, 데이터베이스 연결, 로깅 이게 하나의 세트! 이걸 분리한다!]
    핵심 관점 : 게시글 작성, 회원 가입
    부가 관점 : 데이터베이스 연결, 로깅 등등

    부가관점에 해당하는 로직을 모듈화 핵심 관점 코드에만 집중할 수 있게 될 뿐만 아니라
    프로그램의 변경과 확장에도 유연하게 대응할 수 있다.

▶ OOP 와 AOP의 비교
    OOP
        1) 데이터와 기능을 객체 단위로 묶어 모듈화, 상속과 다형성을 통해 코드를 재사용, 시스템 구조도 명확!
        2) 상속과 다형성을 통해 코드의 재사용성을 높임!

    AOP
        1) 공통된 부가 관점을 모듈화하여 비즈니스 로직과 분리하고, 코드의 재사용성과 유지보수성을 높임!
        2) 모듈화 해놓은 부가 관점을 여러 모듈에서 재사용!





























